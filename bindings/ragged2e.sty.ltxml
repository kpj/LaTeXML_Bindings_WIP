# -*- CPERL -*-
# /======================================================= #
# |  ragged2e.sty - Implementation for LaTeXML            | #
# |                                                       | #
# |=======================================================| #
# | Not yet Part of LaTeXML : http://dlmf.nist.gov/LaTeXML/   | #
# | Copyright (c) 2006 arXMLiv group                      | #
# | Released under the GNU Public License                 | #
# =======================================================/ #

package LaTeXML::Package::Pool;
use strict;
use warnings;
use LaTeXML::Package;

######################################################

#DefConstructor('\Centering', "");
#DefConstructor('\RaggedLeft', "");
#DefConstructor('\RaggedRight', "");
DefConstructor('\justifying', "");

#DefEnvironment('{Center}', "#body");
#DefEnvironment('{FlushLeft}', "#body");
#DefEnvironment('{FlushRight}', "#body");
DefEnvironment('{justify}', "#body");

# copied from LaTeX.pool
DefEnvironment('{Center}', sub {
    $_[0]->maybeCloseElement('ltx:p');    # this starts a new vertical block
    aligningEnvironment('center', 'ltx_centering', @_); },    # aligning will take care of \\\\ "rows"
  beforeDigest => sub {
    Let(T_CS('\par'), T_CS('\inner@par'));
    Let(T_CS('\\\\'), T_CS('\inner@par')); });

DefEnvironment('{Flushleft}', sub {
    $_[0]->maybeCloseElement('ltx:p');                        # this starts a new vertical block
    aligningEnvironment('left', 'ltx_align_left', @_); },
  beforeDigest => sub {
    Let(T_CS('\par'), T_CS('\inner@par'));
    Let(T_CS('\\\\'), T_CS('\inner@par')); });
DefEnvironment('{Flushright}', sub {
    $_[0]->maybeCloseElement('ltx:p');                        # this starts a new vertical block
    aligningEnvironment('right', 'ltx_align_right', @_); },
  beforeDigest => sub {
    Let(T_CS('\par'), T_CS('\inner@par'));
    Let(T_CS('\\\\'), T_CS('\inner@par')); });

DefConstructorI('\Centering', undef,
  sub { AssignValue(ALIGNING_NODE => $_[0]->getElement); return; },
  beforeDigest => sub { UnshiftValue(beforeAfterGroup => T_CS('\@add@centering')); });
DefConstructorI('\Raggedright', undef,
  sub { AssignValue(ALIGNING_NODE => $_[0]->getElement); return; },
  beforeDigest => sub { UnshiftValue(beforeAfterGroup => T_CS('\@add@raggedright')); });
DefConstructorI('\Raggedleft', undef,
  sub { AssignValue(ALIGNING_NODE => $_[0]->getElement); return; },
  beforeDigest => sub { UnshiftValue(beforeAfterGroup => T_CS('\@add@raggedleft')); });

DefConstructorI('\@add@centering', undef,
  sub { if (my $node = LookupValue('ALIGNING_NODE')) {
      map(setAlignOrClass($_[0], $_, 'center', 'ltx_centering'), $_[0]->getChildElements($node)); } });
DefConstructorI('\@add@raggedright', undef,
  sub { if (my $node = LookupValue('ALIGNING_NODE')) {
      map(setAlignOrClass($_[0], $_, undef, 'ltx_align_left'), $_[0]->getChildElements($node)); } });
DefConstructorI('\@add@raggedleft', undef,
  sub { if (my $node = LookupValue('ALIGNING_NODE')) {
      map(setAlignOrClass($_[0], $_, undef, 'ltx_align_right'), $_[0]->getChildElements($node)); } });

DefConstructorI('\@add@flushright', undef,
  sub { if (my $node = LookupValue('ALIGNING_NODE')) {
      map(setAlignOrClass($_[0], $_, 'right', 'ltx_align_right'), $_[0]->getChildElements($node)); } });
DefConstructorI('\@add@flushleft', undef,
  sub { if (my $node = LookupValue('ALIGNING_NODE')) {
      map(setAlignOrClass($_[0], $_, 'left', 'ltx_align_left'), $_[0]->getChildElements($node)); } });

######################################################

1;
