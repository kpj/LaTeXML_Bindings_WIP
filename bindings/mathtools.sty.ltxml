# -*- CPERL -*-
# /=====================================================================\ #
# | mathtools.sty                                                       | #
# | Implementation for LaTeXML                                          | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Thanks to Kim Philipp Jablonski <kpjkpjkpjkpjkpjkpj@gmail.com>      | #
# | of the arXMLiv group for initial implementation                     | #
# |    http://arxmliv.kwarc.info/                                       | #
# | Released under the Gnu Public License                               | #
# | Released to the Public Domain                                       | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #

package LaTeXML::Package::Pool;
use strict;
use warnings;
use LaTeXML::Package;

######################################################

###########
# Options #
###########

# handle special mathtools options
foreach my $option (qw(fixamsmath donotfixamsmathbugs allowspaces disallowspaces)) {
	DeclareOption($option, undef);
}

# pass all other options to amsmath
DeclareOption(
	undef,
	sub {
		PassOptions(
			'amsmath',
			'sty',
			ToString(Digest(T_CS('\CurrentOption')))
		);
	}
);
ProcessOptions();

RequirePackage('amsmath', withoptions => 1);


##########
# Macros #
##########

# 3

DefConstructor(
        '\mathtoolsset {}',
        ""
);

## 3.1

DefConstructor(
	'\mathllap [] {}',
	"#2"
);
DefConstructor(
	'\mathrlap [] {}',
	"#2"
);
DefConstructor(
	'\mathmbox {}',
	"#1"
);
DefConstructor(
	'\mathclap [] {}',
	"#2"
);
DefConstructor(
	'\clap {}',
	"#1"
);
DefConstructor(
	'\mathmakebox [] [] {}',
	"#3"
);

DefConstructor(
	'\cramped [] {}',
	"#2"
);
DefConstructor(
	'\crampedllap [] {}',
	"#2"
);
DefConstructor(
	'\crampedrlap [] {}',
	"#2"
);
DefConstructor(
	'\crampedclap [] {}',
	"#2"
);

DefConstructor(
        '\smashoperator [] {}',
        "#2"
);

DefConstructor(
        '\adjustlimits', # just some wrapper for \lim
        ""
);

DefConstructor(
        '\SwapAboveDisplaySkip', # Undefined control sequence with pdflatex ?!
        ""
);

## 3.2

DefPrimitive(
        '\newtagform {} [] {} {}',
        sub {
                my ($stomach, $name, $style, $open, $close) = @_;
                my $body = Tokens(
                        T_CS('\def'),
                        T_CS('\fnum@equation'),
                        T_BEGIN,
                        T_BEGIN,
                        $open->unlist,
                        (($style)?$style->unlist:()),
                        T_BEGIN,
                        T_CS('\theequation'),
                        T_END,
                        $close->unlist,
                        T_END,
                        T_END
                );
                my $cs = T_CS('\taggy' . ToString($name));

                my $key = "defined:" . Stringify($cs);
                if(LookupValue($key)) {
                        Error(
                                'ignore', $cs, $stomach,
                                "Ignoring redefinition (\\newtagform) of '" . Stringify($cs) . "'"
                        );
                        return;
                }
                AssignValue($key => 1);

                DefMacroI(
                        $cs,
                        undef,
                        $body,
                        scope => 'global'
                );
        }
);
DefPrimitive(
        '\renewtagform {} [] {} {}',
        sub {
                my ($stomach, $name, $style, $open, $close) = @_;
                my $body = Tokens(
                        T_CS('\def'),
                        T_CS('\fnum@equation'),
                        T_BEGIN,
                        T_BEGIN,
                        $open->unlist,
                        (($style)?$style->unlist:()),
                        T_BEGIN,
                        T_CS('\theequation'),
                        T_END,
                        $close->unlist,
                        T_END,
                        T_END
                );
                my $cs = T_CS('\taggy' . ToString($name));

                my $key = "defined:" . Stringify($cs);
                AssignValue($key => 1);

                DefMacroI(
                        $cs,
                        undef,
                        $body,
                        scope => 'global'
                );
        }
);
DefMacro(
        '\usetagform {}',
        '\csname taggy#1\endcsname'
);

Let(
        '\refeq',
        '\ref'
);

## 3.3

DefConstructor(
        '\xleftrightarrow[]{}', # not centered anymore
        "?#1("
                . "<ltx:XMApp role='METARELOP'>"
                . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
                . "<ltx:XMApp role='METARELOP'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xleftrightarrow' role='METARELOP'>\x{2194}</ltx:XMTok>"
                . "</ltx:XMApp>"
                . "</ltx:XMApp>"
                . ")("
                . "<ltx:XMApp role='METARELOP'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xleftrightarrow' role='METARELOP'>\x{2194}</ltx:XMTok>"
                . "</ltx:XMApp>"
        . ")",
        properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } }
);


DefConstructor(
        '\xLeftarrow[]{}',
        "?#1("
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xLeftarrow' role='ARROW'>\x{21D0}</ltx:XMTok>"
                . "</ltx:XMApp>"
                . "</ltx:XMApp>"
                . ")("
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xLeftarrow' role='ARROW'>\x{21D0}</ltx:XMTok>"
                . "</ltx:XMApp>"
        . ")",
        properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } }
);

DefConstructor(
        '\xRightarrow[]{}',
        "?#1("
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xRightarrow' role='ARROW'>\x{21D2}</ltx:XMTok>"
                . "</ltx:XMApp>"
                . "</ltx:XMApp>"
                . ")("
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xRightarrow' role='ARROW'>\x{21D2}</ltx:XMTok>"
                . "</ltx:XMApp>"
        . ")",
        properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } }
);

DefConstructor(
        '\xLeftrightarrow[]{}', # looks stretched
        "?#1("
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xLeftrightarrow' role='ARROW'>\x{21D4}</ltx:XMTok>"
                . "</ltx:XMApp>"
                . "</ltx:XMApp>"
                . ")("
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xLeftrightarrow' role='ARROW'>\x{21D4}</ltx:XMTok>"
                . "</ltx:XMApp>"
        . ")",
        properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } }
);

DefConstructor(
        '\xhookleftarrow[]{}',
        "?#1("
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xhookleftarrow' role='ARROW'>\x{21A9}</ltx:XMTok>"
                . "</ltx:XMApp>"
                . "</ltx:XMApp>"
                . ")("
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xhookleftarrow' role='ARROW'>\x{21A9}</ltx:XMTok>"
                . "</ltx:XMApp>"
        . ")",
        properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } }
);

DefConstructor(
        '\xhookrightarrow[]{}',
        "?#1("
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xhookrightarrow' role='ARROW'>\x{21AA}</ltx:XMTok>"
                . "</ltx:XMApp>"
                . "</ltx:XMApp>"
                . ")("
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xhookrightarrow' role='ARROW'>\x{21AA}</ltx:XMTok>"
                . "</ltx:XMApp>"
        . ")",
        properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } }
);

DefConstructor(
        '\xmapsto[]{}',
        "?#1("
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xmapsto' role='ARROW'>\x{21A6}</ltx:XMTok>"
                . "</ltx:XMApp>"
                . "</ltx:XMApp>"
                . ")("
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xmapsto' role='ARROW'>\x{21A6}</ltx:XMTok>"
                . "</ltx:XMApp>"
        . ")",
        properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } }
);

DefConstructor(
        '\xrightharpoondown[]{}',
        "?#1("
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xrightharpoondown' role='ARROW'>\x{21C1}</ltx:XMTok>"
                . "</ltx:XMApp>"
                . "</ltx:XMApp>"
                . ")("
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xrightharpoondown' role='ARROW'>\x{21C1}</ltx:XMTok>"
                . "</ltx:XMApp>"
        . ")",
        properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } }
);

DefConstructor(
        '\xrightharpoonup[]{}',
        "?#1("
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xrightharpoonup' role='ARROW'>\x{21C0}</ltx:XMTok>"
                . "</ltx:XMApp>"
                . "</ltx:XMApp>"
                . ")("
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xrightharpoonup' role='ARROW'>\x{21C0}</ltx:XMTok>"
                . "</ltx:XMApp>"
        . ")",
        properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } }
);

DefConstructor(
        '\xleftharpoondown[]{}',
        "?#1("
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xleftharpoondown' role='ARROW'>\x{21BD}</ltx:XMTok>"
                . "</ltx:XMApp>"
                . "</ltx:XMApp>"
                . ")("
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xlefttharpoondown' role='ARROW'>\x{21BD}</ltx:XMTok>"
                . "</ltx:XMApp>"
        . ")",
        properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } }
);

DefConstructor(
        '\xleftharpoonup[]{}',
        "?#1("
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xleftharpoonup' role='ARROW'>\x{21BC}</ltx:XMTok>"
                . "</ltx:XMApp>"
                . "</ltx:XMApp>"
                . ")("
                . "<ltx:XMApp role='ARROW'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xleftharpoonup' role='ARROW'>\x{21BC}</ltx:XMTok>"
                . "</ltx:XMApp>"
        . ")",
        properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } }
);

DefConstructor(
        '\xrightleftharpoons[]{}',
        "?#1("
                . "<ltx:XMApp role='METARELOP'>"
                . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
                . "<ltx:XMApp role='METARELOP'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xrightleftharpoons' role='METARELOP'>\x{21CC}</ltx:XMTok>"
                . "</ltx:XMApp>"
                . "</ltx:XMApp>"
                . ")("
                . "<ltx:XMApp role='METARELOP'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xrightleftharpoons' role='METARELOP'>\x{21CC}</ltx:XMTok>"
                . "</ltx:XMApp>"
        . ")",
        properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } }
);

DefConstructor(
        '\xleftrightharpoons[]{}',
        "?#1("
                . "<ltx:XMApp role='METARELOP'>"
                . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
                . "<ltx:XMApp role='METARELOP'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xleftrightharpoons' role='METARELOP'>\x{21CB}</ltx:XMTok>"
                . "</ltx:XMApp>"
                . "</ltx:XMApp>"
                . ")("
                . "<ltx:XMApp role='METARELOP'>"
                . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
                . "<ltx:XMTok name='xleftrightharpoons' role='METARELOP'>\x{21CB}</ltx:XMTok>"
                . "</ltx:XMApp>"
        . ")",
        properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } }
);

DefMacro('\overbracket [] [] {}', '\@overbracket {#3}'); # args: [<rule thickness>] [<bracket height>] {<arg>}
DefMacro('\underbracket [] [] {}', '\@underbracket {#3}');
DefMath('\@overbracket Digested', "\x{FE48}", operator_role => 'OVERACCENT', scriptpos => 'mid');
DefMath('\@underbracket Digested', "\x{FE47}", operator_role => 'UNDERACCENT', scriptpos => 'mid');
Let('\LaTeXunderbrace', '\underbrace');
Let('\LaTeXoverbrace', '\overbrace');


######################################################

1;


# vim: ft=perl: expandtab:
