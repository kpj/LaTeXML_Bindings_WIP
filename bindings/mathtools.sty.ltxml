# -*- CPERL -*-
# /=====================================================================\ #
# | mathtools.sty                                                       | #
# | Implementation for LaTeXML                                          | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Thanks to Kim Philipp Jablonski <kpjkpjkpjkpjkpjkpj@gmail.com>      | #
# | of the arXMLiv group for initial implementation                     | #
# |    http://arxmliv.kwarc.info/                                       | #
# | Released under the Gnu Public License                               | #
# | Released to the Public Domain                                       | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #

package LaTeXML::Package::Pool;
use strict;
use warnings;
use LaTeXML::Package;

######################################################

###########
# Options #
###########

# handle special mathtools options
foreach my $option (qw(fixamsmath donotfixamsmathbugs allowspaces disallowspaces)) {
  DeclareOption($option, undef); }

# pass all other options to amsmath
DeclareOption(undef, sub {
    PassOptions('amsmath', 'sty', ToString(Digest(T_CS('\CurrentOption')))); });
ProcessOptions();
RequirePackage('amsmath', withoptions => 1);

##########
# Macros #
##########

# 3

DefPrimitive('\mathtoolsset RequiredKeyVals', sub {
    my ($stomach, $keyval) = @_;
    my @pairs = $keyval->getPairs();
    while (@pairs) {
      my ($key, $val) = (shift(@pairs), shift(@pairs));
      $val = $val ? ToString($val) : '\@mt@true';
      DefMacro('\csname @mt@mathtoolsset@' . $key . '\endcsname', $val); }
    return; });

#Lookup function for mathtoolsset
DefMacro('\@mt@getmtoption{}', '\ifcsname @mt@mathtoolsset@#1\endcsname'
    . '\expandafter\let\expandafter\@mt@currentvalue\csname @mt@mathtoolsset@#1\endcsname\else'
    . '\let\@mt@currentvalue\relax\fi'
    . '\@mt@currentvalue');

## 3.1

DefConstructor('\mathllap [] {}',       "#2");
DefConstructor('\mathrlap [] {}',       "#2");
DefConstructor('\mathmbox {}',          "#1");
DefConstructor('\mathclap [] {}',       "#2");
DefConstructor('\clap {}',              "#1");
DefConstructor('\mathmakebox [] [] {}', "#3");
DefConstructor('\cramped [] {}',        "#2");
DefConstructor('\crampedllap [] {}',    "#2");
DefConstructor('\crampedrlap [] {}',    "#2");
DefConstructor('\crampedclap [] {}',    "#2");
DefConstructor('\smashoperator [] {}',  "#2");
DefConstructor('\adjustlimits',         "");     # just some wrapper for \lim
DefConstructor('\SwapAboveDisplaySkip', "");

## 3.2

DefPrimitive('\newtagform {} [] {} {}', sub {
    my ($stomach, $name, $style, $open, $close) = @_;
    my $body = Tokens(T_CS('\def'), T_CS('\fnum@equation'), T_BEGIN, T_BEGIN, $open->unlist, (($style) ? $style->unlist : ()), T_BEGIN, T_CS('\theequation'), T_END, $close->unlist, T_END, T_END);
    my $cs = T_CS('\@MTStag@' . ToString($name));
    if (!isDefinable($cs)) {
      Error('ignore', $cs, $stomach,
        "Ignoring redefinition (\\newtagform) of '" . Stringify($cs) . "'");
      return; }
    DefMacroI($cs, undef, $body, scope => 'global'); });
DefPrimitive('\renewtagform {} [] {} {}', sub {
    my ($stomach, $name, $style, $open, $close) = @_;
    my $body = Tokens(T_CS('\def'), T_CS('\fnum@equation'), T_BEGIN, T_BEGIN, $open->unlist, (($style) ? $style->unlist : ()), T_BEGIN, T_CS('\theequation'), T_END, $close->unlist, T_END, T_END);
    my $cs  = T_CS('\@MTStag@' . ToString($name));
    my $key = "defined:" . Stringify($cs);
    DefMacroI($cs, undef, $body, scope => 'global'); });
DefMacro('\usetagform {}', '\csname @MTStag@#1\endcsname');

Let('\refeq', '\ref');
DefMacro('\noeqref{}', '');

## 3.3

DefConstructor('\xleftrightarrow[]{}',    # not centered anymore
  "?#1("
    . "<ltx:XMApp role='METARELOP'>"
    . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
    . "<ltx:XMApp role='METARELOP'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xleftrightarrow' role='METARELOP'>\x{2194}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . "</ltx:XMApp>"
    . ")("
    . "<ltx:XMApp role='METARELOP'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xleftrightarrow' role='METARELOP'>\x{2194}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . ")",
  properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } });

DefConstructor('\xLeftarrow[]{}',
  "?#1("
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xLeftarrow' role='ARROW'>\x{21D0}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . "</ltx:XMApp>"
    . ")("
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xLeftarrow' role='ARROW'>\x{21D0}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . ")",
  properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } });

DefConstructor('\xRightarrow[]{}',
  "?#1("
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xRightarrow' role='ARROW'>\x{21D2}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . "</ltx:XMApp>"
    . ")("
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xRightarrow' role='ARROW'>\x{21D2}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . ")",
  properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } });

DefConstructor('\xLeftrightarrow[]{}',    # looks stretched
  "?#1("
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xLeftrightarrow' role='ARROW'>\x{21D4}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . "</ltx:XMApp>"
    . ")("
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xLeftrightarrow' role='ARROW'>\x{21D4}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . ")",
  properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } });

DefConstructor('\xhookleftarrow[]{}',
  "?#1("
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xhookleftarrow' role='ARROW'>\x{21A9}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . "</ltx:XMApp>"
    . ")("
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xhookleftarrow' role='ARROW'>\x{21A9}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . ")",
  properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } });

DefConstructor('\xhookrightarrow[]{}',
  "?#1("
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xhookrightarrow' role='ARROW'>\x{21AA}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . "</ltx:XMApp>"
    . ")("
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xhookrightarrow' role='ARROW'>\x{21AA}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . ")",
  properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } });

DefConstructor('\xmapsto[]{}',
  "?#1("
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xmapsto' role='ARROW'>\x{21A6}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . "</ltx:XMApp>"
    . ")("
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xmapsto' role='ARROW'>\x{21A6}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . ")",
  properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } });

DefConstructor('\xrightharpoondown[]{}',
  "?#1("
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xrightharpoondown' role='ARROW'>\x{21C1}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . "</ltx:XMApp>"
    . ")("
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xrightharpoondown' role='ARROW'>\x{21C1}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . ")",
  properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } });

DefConstructor('\xrightharpoonup[]{}',
  "?#1("
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xrightharpoonup' role='ARROW'>\x{21C0}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . "</ltx:XMApp>"
    . ")("
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xrightharpoonup' role='ARROW'>\x{21C0}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . ")",
  properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } });

DefConstructor('\xleftharpoondown[]{}',
  "?#1("
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xleftharpoondown' role='ARROW'>\x{21BD}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . "</ltx:XMApp>"
    . ")("
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xlefttharpoondown' role='ARROW'>\x{21BD}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . ")",
  properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } });

DefConstructor('\xleftharpoonup[]{}',
  "?#1("
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xleftharpoonup' role='ARROW'>\x{21BC}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . "</ltx:XMApp>"
    . ")("
    . "<ltx:XMApp role='ARROW'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xleftharpoonup' role='ARROW'>\x{21BC}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . ")",
  properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } });

DefConstructor('\xrightleftharpoons[]{}',
  "?#1("
    . "<ltx:XMApp role='METARELOP'>"
    . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
    . "<ltx:XMApp role='METARELOP'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xrightleftharpoons' role='METARELOP'>\x{21CC}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . "</ltx:XMApp>"
    . ")("
    . "<ltx:XMApp role='METARELOP'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xrightleftharpoons' role='METARELOP'>\x{21CC}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . ")",
  properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } });

DefConstructor('\xleftrightharpoons[]{}',
  "?#1("
    . "<ltx:XMApp role='METARELOP'>"
    . "<ltx:XMWrap role='UNDERACCENT'>#1</ltx:XMWrap>"
    . "<ltx:XMApp role='METARELOP'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xleftrightharpoons' role='METARELOP'>\x{21CB}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . "</ltx:XMApp>"
    . ")("
    . "<ltx:XMApp role='METARELOP'>"
    . "<ltx:XMWrap role='OVERACCENT'>#2</ltx:XMWrap>"
    . "<ltx:XMTok name='xleftrightharpoons' role='METARELOP'>\x{21CB}</ltx:XMTok>"
    . "</ltx:XMApp>"
    . ")",
  properties => { font => sub { LookupValue('font')->specialize("\x{2026}"); } });

DefMacro('\overbracket [] [] {}', '\@overbracket {#3}'); # args: [<rule thickness>] [<bracket height>] {<arg>}
DefMacro('\underbracket [] [] {}', '\@underbracket {#3}');
DefMath('\@overbracket Digested',  "\x{FE48}", operator_role => 'OVERACCENT',  scriptpos => 'mid');
DefMath('\@underbracket Digested', "\x{FE47}", operator_role => 'UNDERACCENT', scriptpos => 'mid');
Let('\LaTeXunderbrace', '\underbrace');
Let('\LaTeXoverbrace',  '\overbrace');

## 3.4
# starred normal matrices
DefMacro('\csname matrix*\endcsname []', '\lx@ams@matrix{name=matrix,datameaning=matrix,alignment=#1}');
DefMacro('\csname endmatrix*\endcsname', '\lx@end@ams@matrix');

DefMacro('\csname pmatrix*\endcsname []', '\lx@ams@matrix{name=pmatrix,datameaning=matrix,alignment=#1,left=\@left(,right=\@right)}');
DefMacro('\csname endpmatrix*\endcsname', '\lx@end@ams@matrix');

DefMacro('\csname bmatrix*\endcsname []', '\lx@ams@matrix{name=bmatrix,datameaning=matrix,alignment=#1,left=\@left[,right=\@right]}');
DefMacro('\csname endbmatrix*\endcsname', '\lx@end@ams@matrix');

DefMacro('\csname Bmatrix*\endcsname []', '\lx@ams@matrix{name=Bmatrix,datameaning=matrix,alignment=#1,left=\@left\{,right=\@right\}}');
DefMacro('\csname endBmatrix*\endcsname', '\lx@end@ams@matrix');

DefMacro('\csname vmatrix*\endcsname []', '\lx@ams@matrix{name=vmatrix,delimitermeaning=determinant,datameaning=matrix,alignment=#1,left=\@left|,right=\@right|}');
DefMacro('\csname endvmatrix*\endcsname', '\lx@end@ams@matrix');

DefMacro('\csname Vmatrix*\endcsname []', '\lx@ams@matrix{name=Vmatrix,delimitermeaning=norm,datameaning=matrix,alignment=#1,left=\@left\|,right=\@right\|}');
DefMacro('\csname endVmatrix*\endcsname', '\lx@end@ams@matrix');

# starred small matrices
DefMacro('\csname smallmatrix*\endcsname []', '\lx@ams@matrix{name=matrix,datameaning=matrix,alignment=#1,style=\scriptsize}');
DefMacro('\csname endsmallmatrix*\endcsname', '\lx@end@ams@matrix');

DefMacro('\csname psmallmatrix*\endcsname []', '\lx@ams@matrix{name=pmatrix,datameaning=matrix,alignment=#1,left=\@left(,right=\@right),style=\scriptsize}');
DefMacro('\csname endpsmallmatrix*\endcsname', '\lx@end@ams@matrix');

DefMacro('\csname bsmallmatrix*\endcsname []', '\lx@ams@matrix{name=bmatrix,datameaning=matrix,alignment=#1,left=\@left[,right=\@right],style=\scriptsize}');
DefMacro('\csname endbsmallmatrix*\endcsname', '\lx@end@ams@matrix');

DefMacro('\csname Bsmallmatrix*\endcsname []', '\lx@ams@matrix{name=Bmatrix,datameaning=matrix,alignment=#1,left=\@left\{,right=\@right\},style=\scriptsize}');
DefMacro('\csname endBsmallmatrix*\endcsname', '\lx@end@ams@matrix');

DefMacro('\csname vsmallmatrix*\endcsname []', '\lx@ams@matrix{name=vmatrix,delimitermeaning=determinant,datameaning=matrix,alignment=#1,left=\@left|,right=\@right|,style=\scriptsize}');
DefMacro('\csname endvsmallmatrix*\endcsname', '\lx@end@ams@matrix');

DefMacro('\csname Vsmallmatrix*\endcsname []', '\lx@ams@matrix{name=Vmatrix,delimitermeaning=norm,datameaning=matrix,alignment=#1,left=\@left\|,right=\@right\|,style=\scriptsize}');
DefMacro('\csname endVsmallmatrix*\endcsname', '\lx@end@ams@matrix');

# non-starred small matrices
DefMacro('\psmallmatrix', '\lx@ams@matrix{name=pmatrix,datameaning=matrix,left=\@left(,right=\@right),style=\scriptsize}');
DefMacro('\endpsmallmatrix', '\lx@end@ams@matrix');

DefMacro('\bsmallmatrix', '\lx@ams@matrix{name=bmatrix,datameaning=matrix,left=\@left[,right=\@right],style=\scriptsize}');
DefMacro('\endbsmallmatrix', '\lx@end@ams@matrix');

DefMacro('\Bsmallmatrix', '\lx@ams@matrix{name=Bmatrix,datameaning=matrix,left=\@left\{,right=\@right\},style=\scriptsize}');
DefMacro('\endBsmallmatrix', '\lx@end@ams@matrix');

DefMacro('\vsmallmatrix', '\lx@ams@matrix{name=vmatrix,delimitermeaning=determinant,datameaning=matrix,left=\@left|,right=\@right|,style=\scriptsize}');
DefMacro('\endvsmallmatrix', '\lx@end@ams@matrix');

DefMacro('\Vsmallmatrix', '\lx@ams@matrix{name=Vmatrix,delimitermeaning=norm,datameaning=matrix,left=\@left\|,right=\@right\|,style=\scriptsize}');
DefMacro('\endVsmallmatrix', '\lx@end@ams@matrix');

# {multlined}
DefKeyVal('multlined', 'width', 'Dimension');

DefConstructor('\@@multlined DigestedBody',
  "#1",
  beforeDigest => sub { $_[0]->bgroup; },
  afterDigest => sub {
    $_[1]->setBody($_[1]->getArg(1)->unlist, undef); },
  afterConstruct => sub {
    rearrangeAMSMultiline($_[0], $_[0]->getNode->lastChild); });

DefPrimitive('\@multlined@bindings RequiredKeyVals:multlined', sub {
    my ($stomach, $attributes) = @_;
    my %attr = $attributes->getPairs;

    if (my $va = $attr{vattach}) {
      $attr{vattach} = translateAttachment($va) || ToString($va); }
    if ($attr{width} && $attr{width}->valueOf == 0) {
      delete $attr{width}; }

    amsMultirowBindings(%attr);
    return; });

DefMacroI('\multlined', '[] Optional:0em', '\@multlined@bindings{name=multlined,vattach=#1,width=#2}\@@multlined\@start@alignment');
DefMacroI('\endmultlined', undef, '\@finish@alignment\@end@multlined');
DefPrimitiveI('\@end@multlined', undef, sub { $_[0]->egroup; });

# cases
DefMacro('\dcases', '\lx@ams@cases{name=dcases,meaning=cases,left=\@left\{,style=\displaystyle,conditionmode=math}');
DefMacro('\enddcases', '\lx@end@ams@cases');

DefMacro('\csname dcases*\endcsname', '\lx@ams@cases{name=dcases,meaning=cases,left=\@left\{,style=\displaystyle,conditionmode=text}');
DefMacro('\csname enddcases*\endcsname', '\lx@end@ams@cases');

DefMacro('\csname rcases\endcsname', '\lx@ams@cases{name=rcases,meaning=cases,right=\@right\},style=\textstyle,conditionmode=math}');
DefMacro('\csname endrcases\endcsname', '\lx@end@ams@cases');

DefMacro('\csname rcases*\endcsname', '\lx@ams@cases{name=rcases,meaning=cases,right=\@right\},style=\textstyle,conditionmode=text}');
DefMacro('\csname endrcases*\endcsname', '\lx@end@ams@cases');

DefMacro('\csname drcases\endcsname', '\lx@ams@cases{name=drcases,meaning=cases,right=\@right\},style=\displaystyle,conditionmode=math}');
DefMacro('\csname enddrcases\endcsname', '\lx@end@ams@cases');

DefMacro('\csname drcases*\endcsname', '\lx@ams@cases{name=drcases,meaning=cases,right=\@right\},style=\displaystyle,conditionmode=text}');
DefMacro('\csname enddrcases*\endcsname', '\lx@end@ams@cases');

DefMacro('\csname cases*\endcsname', '\lx@ams@cases{name=cases,meaning=cases,left=\@left\{,style=\textstyle,conditionmode=text}');
DefMacro('\csname endcases*\endcsname', '\lx@end@ams@cases');

#MoveEqLeft

#Aboxed
#DefMacro('\Aboxed{}', '#1');

## 3.5
Let('\shortintertext', '\@ams@intertext');

## 3.6

DefPrimitive('\DeclarePairedDelimiter DefToken {}{}', sub {
    my ($gullet, $cs, $ldel, $rdel) = @_;
    my $cmd = substr(ToString($cs), 1);

    DefMacroI('\MT@delim@' . $cmd . '@star@wrapper', '{}{}{}',
      '#1#2#3');
    DefMacroI('\MT@delim@' . $cmd . '@nostar@wrapper', '{}{}{}',
      '\mathopen{#1} #2 \mathclose{#3}');

    DefMacroI('\MT@delim@' . $cmd . '@star', '{}',
'\csname MT@delim@' . $cmd . '@star@wrapper\endcsname{\left' . ToString($ldel) . '}{#1}{\right' . ToString($rdel) . '}');
    DefMacroI('\MT@delim@' . $cmd . '@nostar', '[]{}',
'\csname MT@delim@' . $cmd . '@nostar@wrapper\endcsname{#1 ' . ToString($ldel) . '}{#2}{#1 ' . ToString($rdel) . '}');

    DefMacro(ToString($cs), '\@ifstar{\MT@delim@' . $cmd . '@star}{\MT@delim@' . $cmd . '@nostar}'); });

DefPrimitive('\DeclarePairedDelimiterX DefToken [] {} {} {}', sub {
    my ($stomach, $cs, $nargs, $ldel, $rdel, $body) = @_;

    # fix $nargs
    $nargs = $nargs->toString if ref $nargs;
    $nargs = 0 unless $nargs;

    DefMacroI(T_CS(ToString($cs) . '@inner'), join('', map { '{}' } (1 .. $nargs)),
      Tokens($body->unlist, T_CS($cs . '@after')));
    DefMacroI($cs, 'OptionalMatch:* []', sub {
        my ($gullet, $star, $opt) = @_;
        return (($star ? T_CS('\left') : ((defined $opt) ? $opt->unlist : ())),
          $ldel->unlist,
          T_CS('\def'), T_CS('\delimsize'), T_BEGIN, ($opt ? $opt->unlist : ($star ? T_CS('\middle') : ())), T_END,
          T_CS('\def'), T_CS($cs . '@after'), T_BEGIN, ($star ? T_CS('\right') : ((defined $opt) ? $opt->unlist : ())), $rdel->unlist, T_END,
          T_CS(ToString($cs) . '@inner')); }); });

DefPrimitive('\DeclarePairedDelimiterXPP DefToken [] {} {} {} {} {}', sub {
    my ($stomach, $cs, $nargs, $precode, $ldel, $rdel, $postcode, $body) = @_;

    # fix $nargs
    $nargs = $nargs->toString if ref $nargs;
    $nargs = 0 unless $nargs;

    DefMacroI(T_CS(ToString($cs) . '@inner'), join('', map { '{}' } (1 .. $nargs)),
      Tokens($body->unlist, T_CS($cs . '@after'), $postcode->unlist));
    DefMacroI($cs, 'OptionalMatch:* []', sub {
        my ($gullet, $star, $opt) = @_;
        return ($precode->unlist,
          ($star ? T_CS('\left') : ((defined $opt) ? $opt->unlist : ())),
          $ldel->unlist,
          T_CS('\def'), T_CS('\delimsize'), T_BEGIN, ($opt ? $opt->unlist : ($star ? T_CS('\middle') : ())), T_END,
          T_CS('\def'), T_CS($cs . '@after'), T_BEGIN, ($star ? T_CS('\right') : ((defined $opt) ? $opt->unlist : ())), $rdel->unlist, T_END,
          T_CS(ToString($cs) . '@inner')); }); });

# only applies to macros defined with \DeclarePairedDelimiter
DefPrimitive('\reDeclarePairedDelimiterInnerWrapper DefToken {} {}', sub {
    my ($stomach, $cs, $nstar, $body) = @_;
    DefMacroI('\MT@delim@' . (substr(ToString($cs), 1)) . '@' . ToString($nstar) . '@wrapper', '{}{}{}', $body); });

## 3.7

DefMath('\lparen', '(', role => 'OPEN',  stretchy => 'false');
DefMath('\rparen', ')', role => 'CLOSE', stretchy => 'false');

DefMathI('\vcentcolon',    undef, ':', role => 'RELOP');
DefMathI('\ordinarycolon', undef, ':', role => 'RELOP');

DefMath('\dblcolon', "::", role => 'RELOP');
# taken from txfonts.sty.ltxml
DefMath('\coloneqq',    "\x{2254}",   role => 'RELOP');
DefMath('\Coloneqq',    "\x{2A74}",   role => 'RELOP');
DefMath('\coloneq',     ":-",         role => 'RELOP');
DefMath('\Coloneq',     "::-",        role => 'RELOP');
DefMath('\eqqcolon',    "\x{2255}",   role => 'RELOP');
DefMath('\Eqqcolon',    "=::",        role => 'RELOP');
DefMath('\eqcolon',     "-:",         role => 'RELOP');
DefMath('\Eqcolon',     "-::",        role => 'RELOP');
DefMath('\colonapprox', ":\x{2248}",  role => 'RELOP');
DefMath('\Colonapprox', "::\x{2248}", role => 'RELOP');
DefMath('\colonsim',    ":\x{223C}",  role => 'RELOP');
DefMath('\Colonsim',    "::\x{223C}", role => 'RELOP');

DefMathI('\nuparrow', undef, UTF(0x2909), role => 'ARROW'); # could not find arrow with vertical line
DefMathI('\ndownarrow', undef, UTF(0x2908), role => 'ARROW');    # see above
DefMathI('\bigtimes', undef, UTF(0xD7), role => 'MULOP', meaning => 'times', font => { size => 'Big' }, scriptpos => \&doScriptpos);

# 4

## 4.2

DefMathI('\prescript', '{}{}{}', '{}^{\@mt@getmtoption{prescript-sup-format}{#1}}_{\@mt@getmtoption{prescript-sub-format}{#2}}{\@mt@getmtoption{prescript-arg-format}{#3}}', scriptpos => 'pre');

## 4.6

DefMacro('\splitfrac{}{}', '\@multlined@bindings{name=splitfrac}\@@multlined\@start@alignment #1 \\\\ #2 \@finish@alignment\@end@multline');
DefMacro('\splitdfrac{}{}', '\displaystyle\@multlined@bindings{name=splitdfrac}\@@multlined\@start@alignment #1 \\\\ #2 \@finish@alignment\@end@multline');

######################################################

1;

# vim: ft=perl: expandtab:
