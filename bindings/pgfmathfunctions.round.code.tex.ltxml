# -*- CPERL -*-
# /=====================================================================\ #
# | pgfmathfunctions.round.code.tex.ltxml                               | #
# | Implementation for LaTeXML                                          | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Thanks to Kim Philipp Jablonski <kpjkpjkpjkpjkpjkpj@gmail.com>      | #
# | of the arXMLiv group for initial implementation                     | #
# |    http://arxmliv.kwarc.info/                                       | #
# | Released under the Gnu Public License                               | #
# | Released to the Public Domain                                       | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #

package LaTeXML::Package::Pool;
use strict;
use warnings;
use LaTeXML::Package;

use POSIX;

InputDefinitions('pgfmathfunctions.round.code', type => 'tex', noltxml => 1);

######################################################

DefMacroI('\pgfmathround', '{}', sub {
    my ($gullet, $n) = @_;
    $n = ToString(Expand($n));
    DefMacro('\pgfmathresult', int($n + $n / abs($n * 2))); });
Let('\pgfmathround@', '\pgfmathround');

DefMacroI('\pgfmathfloor', '{}', sub {
    my ($gullet, $n) = @_;
    DefMacro('\pgfmathresult', floor(ToString(Expand($n)))); });
Let('\pgfmathfloor@', '\pgfmathfloor');

DefMacroI('\pgfmathceil', '{}', sub {
    my ($gullet, $n) = @_;
    DefMacro('\pgfmathresult', ceil(ToString(Expand($n)))); });
Let('\pgfmathceil@', '\pgfmathceil');

DefMacroI('\pgfmathint', '{}', sub {
    my ($gullet, $n) = @_;
    DefMacro('\pgfmathresult', int(ToString(Expand($n)))); });
Let('\pgfmathint@', '\pgfmathint');

DefMacroI('\pgfmathfrac', '{}', sub {
    my ($gullet, $n) = @_;
    $n = ToString(Expand($n));
    if (index($n, '.') != -1) {
      $n =~ s/.*\./0\./; }
    else {
      $n = '0.0'; }
    DefMacro('\pgfmathresult', $n); });
Let('\pgfmathfrac@', '\pgfmathfrac');

DefMacroI('\pgfmathreal', '{}', sub {
    my ($gullet, $n) = @_;
    $n = ToString(Expand($n));
    if (index($n, '.') == -1) {
      $n .= '.0'; }
    DefMacro('\pgfmathresult', $n); });
Let('\pgfmathreal@', '\pgfmathreal');

######################################################

1;

# vim: ft=perl: noexpandtab:
