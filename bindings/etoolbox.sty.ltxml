# -*- CPERL -*-
# /=====================================================================\ #
# | etoolbox.sty                                                        | #
# | Implementation for LaTeXML                                          | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Thanks to Kim Philipp Jablonski <kpjkpjkpjkpjkpjkpj@gmail.com>      | #
# | of the arXMLiv group for initial implementation                     | #
# |    http://arxmliv.kwarc.info/                                       | #
# | Released under the Gnu Public License                               | #
# | Released to the Public Domain                                       | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #

package LaTeXML::Package::Pool;
use strict;
use warnings;
use LaTeXML::Package;

######################################################

DefRegister('\insc@unt' => Number(20));

DefPrimitive('\newrobustcmd OptionalMatch:* DefToken [Number][]{}', sub {
    my ($stomach, $star, $cs, $nargs, $opt, $body) = @_;
    DefMacroI($cs, convertLaTeXArgs($nargs, $opt), $body); },
  locked => 1);

DefPrimitiveI('\preto',         'DefToken {}',       '', locked => 1);
DefPrimitiveI('\appto',         'DefToken {}',       '', locked => 1);
DefPrimitiveI('\pretocmd',      'DefToken {}{}{}',   '', locked => 1);
DefPrimitiveI('\patchcmd',      'DefToken {}{}{}{}', '', locked => 1);
DefPrimitiveI('\AtEndPreamble', '{}',                '', locked => 1);

DefRegisterI('\numexpr', undef, Number(0),
  getter => sub {
    my $gullet = $STATE->getStomach->getGullet;
    my @int_expr = (' ', '(', ')', '+', '-', '*', '/', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0');
    my $expr;

    while (my $tok = $gullet->readXToken) {
      if (not $tok->getString ~~ @int_expr) {
        $gullet->unread($tok) unless Equals($tok, T_CS('\relax'));
        last; }
      $expr .= $tok->getString; }

    my $res = eval($expr);
    $res = int($res + $res / abs($res * 2));    # round result

    return Number($res); });

InputDefinitions('etoolbox', type => 'sty', noltxml => 1);

######################################################

1;

# vim: ft=perl:
