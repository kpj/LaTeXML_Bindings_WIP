# -*- CPERL -*-
# /=====================================================================\ #
# | pgfmathfunctions.basic.code.tex                                     | #
# | Implementation for LaTeXML                                          | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Thanks to Kim Philipp Jablonski <kpjkpjkpjkpjkpjkpj@gmail.com>      | #
# | of the arXMLiv group for initial implementation                     | #
# |    http://arxmliv.kwarc.info/                                       | #
# | Released under the Gnu Public License                               | #
# | Released to the Public Domain                                       | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #

package LaTeXML::Package::Pool;
use strict;
use warnings;
use LaTeXML::Package;

InputDefinitions('pgfmathfunctions.basic.code', type => 'tex', noltxml => 1);

######################################################

####################
# Helper Functions #
####################

sub pgfmathFactorial {
  my ($arg) = @_;
  my $f = 1;
  foreach (2 .. $arg) { $f *= $_ }
  return $f; }

##########
# Macros #
##########

# \pgfmath<operator> -> macro used in pure LaTeX (\pgfmathadd{2}{6})
# \pgfmath<operator>@ -> macro used in TikZ (2 + 6)

DefMacroI('\pgfmathadd', '{}{}', sub {
    my ($gullet, $n1, $n2) = @_;
    DefMacroI('\pgfmathresult', undef, ToString(Expand($n1)) + ToString(Expand($n2))); });
Let('\pgfmathadd@', '\pgfmathadd');

DefMacroI('\pgfmathsubtract', '{}{}', sub {
    my ($gullet, $n1, $n2) = @_;
    DefMacroI('\pgfmathresult', undef, ToString(Expand($n1)) - ToString(Expand($n2))); });
Let('\pgfmathsubtract@', '\pgfmathsubtract');

DefMacroI('\pgfmathneg', '{}', sub {
    my ($gullet, $n) = @_;
    DefMacroI('\pgfmathresult', undef, -ToString(Expand($n))); });
Let('\pgfmathneg@', '\pgfmathneg');

DefMacroI('\pgfmathmultiply', '{}{}', sub {
    my ($gullet, $n1, $n2) = @_;
    DefMacroI('\pgfmathresult', undef, ToString(Expand($n1)) * ToString(Expand($n2))); });
Let('\pgfmathmultiply@', '\pgfmathmultiply');

DefMacroI('\pgfmathdivide', '{}{}', sub {
    my ($gullet, $n1, $n2) = @_;
    DefMacroI('\pgfmathresult', undef, ToString(Expand($n1)) / ToString(Expand($n2))); });
Let('\pgfmathdivide@', '\pgfmathdivide');

DefMacroI('\pgfmathreciprocal', '{}', sub {
    my ($gullet, $n) = @_;
    DefMacroI('\pgfmathresult', undef, 1 / ToString(Expand($n))); });
Let('\pgfmathreciprocal@', '\pgfmathreciprocal');

DefMacroI('\pgfmathdiv', '{}{}', sub {
    my ($gullet, $n1, $n2) = @_;
    DefMacroI('\pgfmathresult', undef, int(ToString(Expand($n1)) / ToString(Expand($n2)))); });
Let('\pgfmathdiv@', '\pgfmathdiv');

DefMacroI('\pgfmathmod', '{}{}', sub {
    my ($gullet, $n1, $n2) = @_;
    { use integer;    # very hacky solution (depends on implementation in C compiler)
      DefMacroI('\pgfmathresult', undef, ToString(Expand($n1)) % ToString(Expand($n2))); } });
Let('\pgfmathmod@', '\pgfmathmod');

DefMacroI('\pgfmathMod', '{}{}', sub {
    my ($gullet, $n1, $n2) = @_;
    DefMacroI('\pgfmathresult', undef, ToString(Expand($n1)) % ToString(Expand($n2))); });
Let('\pgfmathMod@', '\pgfmathMod');

DefMacroI('\pgfmathabs', '{}', sub {
    my ($gullet, $n) = @_;
    DefMacroI('\pgfmathresult', undef, abs(ToString(Expand($n)))); });
Let('\pgfmathabs@', '\pgfmathabs');

DefMacroI('\pgfmathe', undef, sub {
    DefMacroI('\pgfmathresult', undef, 2.718281828); });
Let('\pgfmathe@', '\pgfmathe');

DefMacroI('\pgfmathln', '{}', sub {
    my ($gullet, $n) = @_;
    DefMacroI('\pgfmathresult', undef, log(ToString(Expand($n)))); }); # log is the natural logarithm in perl
Let('\pgfmathln@', '\pgfmathln');

DefMacroI('\pgfmathlog2', '{}', sub {
    my ($gullet, $n) = @_;
    DefMacroI('\pgfmathresult', undef, log(ToString(Expand($n)) / log(2))); });
Let('\pgfmathlog2@', '\pgfmathlog2');

DefMacroI('\pgfmathlog10', '{}', sub {
    my ($gullet, $n) = @_;
    DefMacroI('\pgfmathresult', undef, log(ToString(Expand($n)) / log(10))); });
Let('\pgfmathlog10@', '\pgfmathlog10');

DefMacroI('\pgfmathexp', '{}', sub {
    my ($gullet, $n) = @_;
    DefMacroI('\pgfmathresult', undef, exp(ToString(Expand($n)))); });
Let('\pgfmathexp@', '\pgfmathexp');

DefMacroI('\pgfmathsqrt', '{}', sub {
    my ($gullet, $n) = @_;
    DefMacroI('\pgfmathresult', undef, sqrt(ToString(Expand($n)))); });
Let('\pgfmathsqrt@', '\pgfmathsqrt');

DefMacroI('\pgfmathpow', '{}{}', sub {
    my ($gullet, $n1, $n2) = @_;
    DefMacroI('\pgfmathresult', undef, ToString(Expand($n1))**ToString(Expand($n2))); });
Let('\pgfmathpow@', '\pgfmathpow');

DefMacroI('\pgfmathfactorial', '{}', sub {
    my ($gullet, $n) = @_;
    DefMacroI('\pgfmathresult', undef, pgfmathFactorial(ToString(Expand($n)))); });
Let('\pgfmathfactorial@', '\pgfmathfactorial');

######################################################

1;

# vim: ft=perl: noexpandtab:
